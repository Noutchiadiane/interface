{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/Documents/Project Boris/interfaceProjectFirst/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { NotificationTypeEnum } from '../../../models/notifications/notifications.model';\nimport { AccountTypeEnum } from '../../../models/users/user.model';\nimport { environment } from 'src/environments/environment';\nimport { Component, HostListener } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { JOBS_ENTERPRISE_ROUTES } from '../../../constants/routes/enterprise.routing';\nimport { JOBS_HOME_ROUTES } from '../../../constants/routes/home.routing';\nimport { JOBS_MY_ROUTES } from '../../../constants/routes/my.routing';\nimport { SharedBecomeEnterpriseComponent } from '../../company/shared-become-enterprise/shared-become-enterprise.component';\nimport { CompanyStatusEnum } from '../../../models/users/userInformations/user-informations';\nimport { filter, map, skipWhile, take, tap } from 'rxjs/operators';\nimport { CompanyActions } from '../../../../ngxs/company/company.actions';\nimport { UserActions } from '../../../../ngxs/user/user.actions';\nimport * as moment from 'moment';\nimport { SharedWarningComponent } from \"../../item/shared-warning/shared-warning.component\";\nimport { ResumeStatusEnum } from \"../../../models/cv-models/cv/cv.model\";\nimport { SharedMenuHeaderNotificationService } from \"../../../services/SharedMenuHeader/shared-menu-header-notification.service\";\nimport { ResumeActions } from \"../../../../ngxs/resume/resume.actions\";\nimport { resetCompanyState } from \"../../../utils/NgxsResetState\";\nlet SharedMenuHeaderComponent = class SharedMenuHeaderComponent {\n  constructor(router, eRef, utilsService, toastr, modalService, store, logicNotificationService, sharedMenuHeaderService) {\n    this.router = router;\n    this.eRef = eRef;\n    this.utilsService = utilsService;\n    this.toastr = toastr;\n    this.modalService = modalService;\n    this.store = store;\n    this.logicNotificationService = logicNotificationService;\n    this.sharedMenuHeaderService = sharedMenuHeaderService;\n    this.now = new Date();\n    this.currentUser = null;\n    this.loginUrl = '/login';\n    this.registerUrl = '/register';\n    this.accountTypeEnum = AccountTypeEnum;\n    this.menuType = AccountTypeEnum.ME;\n    this.companyStatusType = CompanyStatusEnum;\n    this.showAccountList = false;\n    this.isMenuCollapsed = true;\n    this.isChange = false;\n    this.show = false;\n    this.show1 = false;\n    this.show2 = false;\n    this.show3 = false;\n    this.show4 = false;\n    this.showMenu = false;\n    this.showNotifs = false;\n    this.subscription = new Subscription();\n    this.documentClickTargetSubscribe = new Subscription();\n    this.isUser = true;\n    this.loadingCloseNotification = false;\n    this.isCandidate = false;\n    this.closeNotificationType = null;\n    //variable for handle take and skip load data\n    this.TAKE = 10;\n    this.SKIP = 0;\n    this.isLoading = false;\n    this.activeCompany = [];\n    this.archiveCompanies = [];\n    // variable for get notification of an company\n    this.notifications = {\n      Count: 0,\n      data: null\n    };\n    this.notificationsRead = {\n      Count: 0,\n      data: null\n    };\n    // variable for get candidature of an user\n    this.numberOfDelenscioNotification = 0;\n    this.numberOfJobApplyNotification = 0;\n    this.numberOfResumeMatchNotification = 0;\n    this.numberOfExpireJobNotification = 0;\n    this.notificationOfTypeDelenscioNotification = [];\n    this.notificationOfTypeJobApplyNotification = [];\n    this.notificationOfTypeResumeMatchNotification = [];\n    this.notificationOfTypeExpireJobNotification = [];\n    this.lastNotificationOfTypeDelenscioNotification = null;\n    this.lastNotificationOfTypeJobApplyNotification = null;\n    this.lastNotificationOfTypeResumeMatchNotification = null;\n    this.lastNotificationOfTypeExpireJobNotification = null;\n    this.notificationTypeEnum = NotificationTypeEnum;\n    this.lastNotification = [];\n    this.userNotificationState$ = this.store.select(state => state.userNotification);\n    this.resumeOfCurrentUser$ = this.store.select(state => state.resume.currentResumeOfConnectedUser.data);\n    this.companyState$ = this.store.select(state => state.company);\n    this.currentUserProfile$ = this.store.select(state => state.user.currentUser).pipe(map(user => user.ProfileMedia));\n    this.companiesOfCurrentUser$ = this.store.select(state => state.company.companies);\n    this.currentUser$ = this.store.select(state => state.user.currentUser);\n    this.currentUser$.pipe(skipWhile(value => !value)).subscribe(value => this.currentUser = value);\n    this.resumeOfCurrentUser$.pipe(skipWhile(value => !value)).subscribe(value => this.currentResumeUser = value);\n    const urlSplitTab = this.router.url.split('/');\n    this.currentTab = this.router.url.split('/')[urlSplitTab.length - 1];\n    this.JOBS_ENTERPRISE_ROUTES = JOBS_ENTERPRISE_ROUTES;\n    this.JOBS_HOME_ROUTES = JOBS_HOME_ROUTES;\n    this.JOBS_MY_ROUTES = JOBS_MY_ROUTES;\n  }\n  ngOnInit() {\n    this.userNotificationState$.pipe(tap(value => {\n      this.numberOfResumeMatchNotification = value.candidature.count;\n      this.numberOfExpireJobNotification = value.expired.count;\n      this.numberOfJobApplyNotification = value.jobs.count;\n      this.notifications = {\n        data: value.unRead.data,\n        Count: value.unRead.count\n      };\n      if (value.expired.count > 0) {\n        this.lastNotificationOfTypeExpireJobNotification = value.expired.data[0];\n      }\n      if (value.jobs.count > 0) {\n        this.lastNotificationOfTypeJobApplyNotification = value.jobs.data[0];\n      }\n      if (value.candidature.count > 0) {\n        this.lastNotificationOfTypeResumeMatchNotification = value.candidature.data[0];\n      }\n    })).subscribe();\n    this.companyState$.pipe(filter(value => value.isFetch), tap(value => {\n      this.isUser = !value.data;\n      this.currentCompany = value.data;\n      if (value.companies.length > 0) {\n        this.activeCompany = value.companies.filter(el => {\n          return el.Status !== CompanyStatusEnum.archived;\n        });\n        this.archiveCompanies = value.companies.filter(el => {\n          return el.Status === CompanyStatusEnum.archived;\n        });\n        this.menuType = this.accountTypeEnum.CONPANY;\n      }\n    })).subscribe();\n    this.store.select(state => state.userNotification);\n  }\n  openChangeStateConfirm() {\n    var _this = this;\n    const modal = this.modalService.open(SharedWarningComponent, {\n      centered: true,\n      size: 'sm'\n    });\n    modal.componentInstance.isConfirm = true;\n    modal.componentInstance.message = 'vous ';\n    modal.componentInstance.title = 'change de statut';\n    modal.componentInstance.clickEvent.subscribe( /*#__PURE__*/_asyncToGenerator(function* () {\n      yield _this.store.dispatch(new UserActions.UpdateConnectedUser(Object.assign(Object.assign({}, _this.currentUser), {\n        IsCandidate: true\n      }))).toPromise();\n      yield _this.store.dispatch(new ResumeActions.UpdateCurrentResumeOfConnectedUser(Object.assign(Object.assign({}, _this.currentResumeUser), {\n        Status: ResumeStatusEnum.active\n      }))).toPromise();\n      modal.close();\n    }));\n  }\n  changeCompany(company, redirectedAfter = true) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.isChange = true;\n      sessionStorage.removeItem('actives-seo-for-company');\n      resetCompanyState(_this2.store);\n      _this2.store.dispatch(new CompanyActions.setCurrentCompanyOfConnectedUser(company));\n      if (redirectedAfter) {\n        yield _this2.router.navigate(['/enterprise/profile/my/about']);\n      }\n      _this2.menuType = _this2.accountTypeEnum.CONPANY;\n      _this2.modalService.dismissAll();\n      _this2.isUser = false;\n      _this2.showAccountList = false;\n    })();\n  }\n  goToMessage() {\n    if (this.currentCompany) {\n      this.router.navigate(['/enterprise', 'profile', 'my', 'my-messages']);\n    } else {\n      this.router.navigate(['/my-jobs', 'my-messages']);\n    }\n  }\n  clickLogo(goToEnterprise = false) {\n    if (this.currentUser) {\n      if (this.currentCompany) {\n        this.router.navigate(['/enterprise', 'profile', 'my', 'about']);\n      } else {\n        this.router.navigate(['/my-jobs', 'my-profile']);\n      }\n    } else {\n      this.router.navigate(['/']);\n    }\n  }\n  goToDelenscioHome() {\n    window.open(environment.websiteDelenscioHome);\n  }\n  goToDelenscioCvLibrary() {\n    window.open(environment.websiteDelenscioCvLibrary);\n  }\n  goToDelenscioTesting() {\n    window.open(environment.websiteDelenscioTesting);\n  }\n  open(content) {\n    this.modalService.open(content, {\n      backdrop: 'static',\n      keyboard: false,\n      size: 'lg',\n      centered: true\n    });\n  }\n  archiveCompany() {}\n  setUser(setRoute = true) {\n    if (!this.isUser) {\n      this.menuType = this.accountTypeEnum.ME;\n      this.isChange = true;\n      sessionStorage.removeItem('actives-seo-for-company');\n      this.store.dispatch(new CompanyActions.setCurrentCompanyOfConnectedUser(null));\n      localStorage.removeItem('currentcompanyid');\n      if (setRoute) {\n        this.router.navigate(['/my-jobs/my-profile']);\n      }\n      this.isUser = true;\n      this.showAccountList = false;\n    }\n    console.log(this.isUser);\n  }\n  toogle() {\n    this.show = !this.show;\n  }\n  toogle1() {\n    this.show1 = !this.show1;\n  }\n  toogle2() {\n    this.show2 = !this.show2;\n  }\n  toogle3() {\n    this.show3 = !this.show3;\n  }\n  toogle4() {\n    this.show4 = !this.show4;\n  }\n  toogleMenu() {\n    this.showMenu = !this.showMenu;\n  }\n  toogleNotifs() {\n    if (!this.showNotifs) {\n      // this.loadMore(0, 10);\n    }\n    this.showNotifs = !this.showNotifs;\n  }\n  becomeEnterprise() {\n    this.show = false;\n    this.showAccountList = false;\n    this.companiesOfCurrentUser$.pipe(take(1), tap(value => {\n      if (!value || value && value.length < 5) {\n        this.modalService.open(SharedBecomeEnterpriseComponent, {\n          backdrop: 'static',\n          keyboard: false,\n          size: 'lg',\n          centered: true\n        });\n      } else {\n        this.toastr.warning('nombre maximun de compte business atteint', 'vous ne pouvez avoir plus de 5 compte business');\n      }\n    })).toPromise().then();\n  }\n  onClick1(event) {\n    setTimeout(() => {\n      var _a;\n      if (!((_a = document.getElementById('account')) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {\n        // or some similar check\n        if (this.showAccountList === true) {\n          this.showAccountList = !this.showAccountList;\n        }\n      }\n    });\n    setTimeout(() => {\n      var _a;\n      if (!((_a = document.getElementById('navigationMenu')) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {\n        // or some similar check\n        if (this.show === true) {\n          this.show = !this.show;\n        }\n      }\n    });\n  }\n  onToggleMenu() {\n    this.isMenuCollapsed = !this.isMenuCollapsed;\n  }\n  logout() {\n    this.router.navigate(['/logout']);\n  }\n  allNotifs(content) {\n    this.modalService.open(content, {\n      size: 'md',\n      centered: true,\n      scrollable: true\n    });\n  }\n  createdHourAgo(createdAt) {\n    return moment().diff(createdAt, 'hours');\n  }\n  createdDayAgo(createdAt) {\n    return moment().diff(createdAt, 'days');\n  }\n  createdMinutesAgo(createdAt) {\n    return moment().diff(createdAt, 'minutes');\n  }\n  createdSecondesAgo(createdAt) {\n    return moment().diff(createdAt, 'seconds');\n  }\n  closeNotification(notifications, notificationType) {\n    return _asyncToGenerator(function* () {})();\n  }\n  setNotification() {\n    this.numberOfDelenscioNotification = 0;\n  }\n  // E(ND LOAD MORE\n  ngOnDestroy() {\n    this.documentClickTargetSubscribe.unsubscribe();\n    this.subscription.unsubscribe();\n  }\n};\n__decorate([HostListener('document:click', ['$event'])], SharedMenuHeaderComponent.prototype, \"onClick1\", null);\nSharedMenuHeaderComponent = __decorate([Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'job-shared-menu-header',\n  templateUrl: './shared-menu-header.component.html',\n  styleUrls: ['./shared-menu-header.component.scss'],\n  providers: [SharedMenuHeaderNotificationService]\n  // host: {'(window:click)': 'onClick($event)'},\n})], SharedMenuHeaderComponent);\nexport { SharedMenuHeaderComponent };","map":{"version":3,"names":["__decorate","NotificationTypeEnum","AccountTypeEnum","environment","Component","HostListener","Subscription","JOBS_ENTERPRISE_ROUTES","JOBS_HOME_ROUTES","JOBS_MY_ROUTES","SharedBecomeEnterpriseComponent","CompanyStatusEnum","filter","map","skipWhile","take","tap","CompanyActions","UserActions","moment","SharedWarningComponent","ResumeStatusEnum","SharedMenuHeaderNotificationService","ResumeActions","resetCompanyState","SharedMenuHeaderComponent","constructor","router","eRef","utilsService","toastr","modalService","store","logicNotificationService","sharedMenuHeaderService","now","Date","currentUser","loginUrl","registerUrl","accountTypeEnum","menuType","ME","companyStatusType","showAccountList","isMenuCollapsed","isChange","show","show1","show2","show3","show4","showMenu","showNotifs","subscription","documentClickTargetSubscribe","isUser","loadingCloseNotification","isCandidate","closeNotificationType","TAKE","SKIP","isLoading","activeCompany","archiveCompanies","notifications","Count","data","notificationsRead","numberOfDelenscioNotification","numberOfJobApplyNotification","numberOfResumeMatchNotification","numberOfExpireJobNotification","notificationOfTypeDelenscioNotification","notificationOfTypeJobApplyNotification","notificationOfTypeResumeMatchNotification","notificationOfTypeExpireJobNotification","lastNotificationOfTypeDelenscioNotification","lastNotificationOfTypeJobApplyNotification","lastNotificationOfTypeResumeMatchNotification","lastNotificationOfTypeExpireJobNotification","notificationTypeEnum","lastNotification","userNotificationState$","select","state","userNotification","resumeOfCurrentUser$","resume","currentResumeOfConnectedUser","companyState$","company","currentUserProfile$","user","pipe","ProfileMedia","companiesOfCurrentUser$","companies","currentUser$","value","subscribe","currentResumeUser","urlSplitTab","url","split","currentTab","length","ngOnInit","candidature","count","expired","jobs","unRead","isFetch","currentCompany","el","Status","archived","CONPANY","openChangeStateConfirm","_this","modal","open","centered","size","componentInstance","isConfirm","message","title","clickEvent","_asyncToGenerator","dispatch","UpdateConnectedUser","Object","assign","IsCandidate","toPromise","UpdateCurrentResumeOfConnectedUser","active","close","changeCompany","redirectedAfter","_this2","sessionStorage","removeItem","setCurrentCompanyOfConnectedUser","navigate","dismissAll","goToMessage","clickLogo","goToEnterprise","goToDelenscioHome","window","websiteDelenscioHome","goToDelenscioCvLibrary","websiteDelenscioCvLibrary","goToDelenscioTesting","websiteDelenscioTesting","content","backdrop","keyboard","archiveCompany","setUser","setRoute","localStorage","console","log","toogle","toogle1","toogle2","toogle3","toogle4","toogleMenu","toogleNotifs","becomeEnterprise","warning","then","onClick1","event","setTimeout","_a","document","getElementById","contains","target","onToggleMenu","logout","allNotifs","scrollable","createdHourAgo","createdAt","diff","createdDayAgo","createdMinutesAgo","createdSecondesAgo","closeNotification","notificationType","setNotification","ngOnDestroy","unsubscribe","prototype","selector","templateUrl","styleUrls","providers"],"sources":["C:/Users/user/Documents/Project Boris/interfaceProjectFirst/src/app/shared/components/layout/shared-menu-header/shared-menu-header.component.ts"],"sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { NotificationTypeEnum } from '../../../models/notifications/notifications.model';\r\nimport { AccountTypeEnum } from '../../../models/users/user.model';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Component, HostListener, } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { JOBS_ENTERPRISE_ROUTES } from '../../../constants/routes/enterprise.routing';\r\nimport { JOBS_HOME_ROUTES } from '../../../constants/routes/home.routing';\r\nimport { JOBS_MY_ROUTES } from '../../../constants/routes/my.routing';\r\nimport { SharedBecomeEnterpriseComponent } from '../../company/shared-become-enterprise/shared-become-enterprise.component';\r\nimport { CompanyStatusEnum, } from '../../../models/users/userInformations/user-informations';\r\nimport { filter, map, skipWhile, take, tap, } from 'rxjs/operators';\r\nimport { CompanyActions } from '../../../../ngxs/company/company.actions';\r\nimport { UserActions } from '../../../../ngxs/user/user.actions';\r\nimport * as moment from 'moment';\r\nimport { SharedWarningComponent } from \"../../item/shared-warning/shared-warning.component\";\r\nimport { ResumeStatusEnum } from \"../../../models/cv-models/cv/cv.model\";\r\nimport { SharedMenuHeaderNotificationService } from \"../../../services/SharedMenuHeader/shared-menu-header-notification.service\";\r\nimport { ResumeActions } from \"../../../../ngxs/resume/resume.actions\";\r\nimport { resetCompanyState } from \"../../../utils/NgxsResetState\";\r\nlet SharedMenuHeaderComponent = class SharedMenuHeaderComponent {\r\n    constructor(router, eRef, utilsService, toastr, modalService, store, logicNotificationService, sharedMenuHeaderService) {\r\n        this.router = router;\r\n        this.eRef = eRef;\r\n        this.utilsService = utilsService;\r\n        this.toastr = toastr;\r\n        this.modalService = modalService;\r\n        this.store = store;\r\n        this.logicNotificationService = logicNotificationService;\r\n        this.sharedMenuHeaderService = sharedMenuHeaderService;\r\n        this.now = new Date();\r\n        this.currentUser = null;\r\n        this.loginUrl = '/login';\r\n        this.registerUrl = '/register';\r\n        this.accountTypeEnum = AccountTypeEnum;\r\n        this.menuType = AccountTypeEnum.ME;\r\n        this.companyStatusType = CompanyStatusEnum;\r\n        this.showAccountList = false;\r\n        this.isMenuCollapsed = true;\r\n        this.isChange = false;\r\n        this.show = false;\r\n        this.show1 = false;\r\n        this.show2 = false;\r\n        this.show3 = false;\r\n        this.show4 = false;\r\n        this.showMenu = false;\r\n        this.showNotifs = false;\r\n        this.subscription = new Subscription();\r\n        this.documentClickTargetSubscribe = new Subscription();\r\n        this.isUser = true;\r\n        this.loadingCloseNotification = false;\r\n        this.isCandidate = false;\r\n        this.closeNotificationType = null;\r\n        //variable for handle take and skip load data\r\n        this.TAKE = 10;\r\n        this.SKIP = 0;\r\n        this.isLoading = false;\r\n        this.activeCompany = [];\r\n        this.archiveCompanies = [];\r\n        // variable for get notification of an company\r\n        this.notifications = {\r\n            Count: 0,\r\n            data: null,\r\n        };\r\n        this.notificationsRead = {\r\n            Count: 0,\r\n            data: null,\r\n        };\r\n        // variable for get candidature of an user\r\n        this.numberOfDelenscioNotification = 0;\r\n        this.numberOfJobApplyNotification = 0;\r\n        this.numberOfResumeMatchNotification = 0;\r\n        this.numberOfExpireJobNotification = 0;\r\n        this.notificationOfTypeDelenscioNotification = [];\r\n        this.notificationOfTypeJobApplyNotification = [];\r\n        this.notificationOfTypeResumeMatchNotification = [];\r\n        this.notificationOfTypeExpireJobNotification = [];\r\n        this.lastNotificationOfTypeDelenscioNotification = null;\r\n        this.lastNotificationOfTypeJobApplyNotification = null;\r\n        this.lastNotificationOfTypeResumeMatchNotification = null;\r\n        this.lastNotificationOfTypeExpireJobNotification = null;\r\n        this.notificationTypeEnum = NotificationTypeEnum;\r\n        this.lastNotification = [];\r\n        this.userNotificationState$ = this.store.select(state => state.userNotification);\r\n        this.resumeOfCurrentUser$ = this.store.select(state => state.resume.currentResumeOfConnectedUser.data);\r\n        this.companyState$ = this.store.select(state => state.company);\r\n        this.currentUserProfile$ = this.store.select((state) => state.user.currentUser).pipe(map((user) => user.ProfileMedia));\r\n        this.companiesOfCurrentUser$ = this.store.select((state) => state.company.companies);\r\n        this.currentUser$ = this.store.select((state) => state.user.currentUser);\r\n        this.currentUser$.pipe(skipWhile(value => !value)).subscribe(value => this.currentUser = value);\r\n        this.resumeOfCurrentUser$.pipe(skipWhile(value => !value)).subscribe(value => this.currentResumeUser = value);\r\n        const urlSplitTab = this.router.url.split('/');\r\n        this.currentTab = this.router.url.split('/')[urlSplitTab.length - 1];\r\n        this.JOBS_ENTERPRISE_ROUTES = JOBS_ENTERPRISE_ROUTES;\r\n        this.JOBS_HOME_ROUTES = JOBS_HOME_ROUTES;\r\n        this.JOBS_MY_ROUTES = JOBS_MY_ROUTES;\r\n    }\r\n    ngOnInit() {\r\n        this.userNotificationState$.pipe(tap(value => {\r\n            this.numberOfResumeMatchNotification = value.candidature.count;\r\n            this.numberOfExpireJobNotification = value.expired.count;\r\n            this.numberOfJobApplyNotification = value.jobs.count;\r\n            this.notifications = { data: value.unRead.data, Count: value.unRead.count };\r\n            if (value.expired.count > 0) {\r\n                this.lastNotificationOfTypeExpireJobNotification = value.expired.data[0];\r\n            }\r\n            if (value.jobs.count > 0) {\r\n                this.lastNotificationOfTypeJobApplyNotification = value.jobs.data[0];\r\n            }\r\n            if (value.candidature.count > 0) {\r\n                this.lastNotificationOfTypeResumeMatchNotification = value.candidature.data[0];\r\n            }\r\n        })).subscribe();\r\n        this.companyState$.pipe(filter(value => value.isFetch), tap((value) => {\r\n            this.isUser = !value.data;\r\n            this.currentCompany = value.data;\r\n            if (value.companies.length > 0) {\r\n                this.activeCompany = value.companies.filter(el => {\r\n                    return el.Status !== CompanyStatusEnum.archived;\r\n                });\r\n                this.archiveCompanies = value.companies.filter(el => {\r\n                    return el.Status === CompanyStatusEnum.archived;\r\n                });\r\n                this.menuType = this.accountTypeEnum.CONPANY;\r\n            }\r\n        })).subscribe();\r\n        this.store.select(state => state.userNotification);\r\n    }\r\n    openChangeStateConfirm() {\r\n        const modal = this.modalService.open(SharedWarningComponent, {\r\n            centered: true,\r\n            size: 'sm'\r\n        });\r\n        modal.componentInstance.isConfirm = true;\r\n        modal.componentInstance.message = 'vous ';\r\n        modal.componentInstance.title = 'change de statut';\r\n        modal.componentInstance.clickEvent.subscribe(async () => {\r\n            await this.store.dispatch(new UserActions.UpdateConnectedUser(Object.assign(Object.assign({}, this.currentUser), { IsCandidate: true }))).toPromise();\r\n            await this.store.dispatch(new ResumeActions.UpdateCurrentResumeOfConnectedUser(Object.assign(Object.assign({}, this.currentResumeUser), { Status: ResumeStatusEnum.active }))).toPromise();\r\n            modal.close();\r\n        });\r\n    }\r\n    async changeCompany(company, redirectedAfter = true) {\r\n        this.isChange = true;\r\n        sessionStorage.removeItem('actives-seo-for-company');\r\n        resetCompanyState(this.store);\r\n        this.store.dispatch(new CompanyActions.setCurrentCompanyOfConnectedUser(company));\r\n        if (redirectedAfter) {\r\n            await this.router.navigate(['/enterprise/profile/my/about']);\r\n        }\r\n        this.menuType = this.accountTypeEnum.CONPANY;\r\n        this.modalService.dismissAll();\r\n        this.isUser = false;\r\n        this.showAccountList = false;\r\n    }\r\n    goToMessage() {\r\n        if (this.currentCompany) {\r\n            this.router.navigate(['/enterprise', 'profile', 'my', 'my-messages']);\r\n        }\r\n        else {\r\n            this.router.navigate(['/my-jobs', 'my-messages']);\r\n        }\r\n    }\r\n    clickLogo(goToEnterprise = false) {\r\n        if (this.currentUser) {\r\n            if (this.currentCompany) {\r\n                this.router.navigate(['/enterprise', 'profile', 'my', 'about']);\r\n            }\r\n            else {\r\n                this.router.navigate(['/my-jobs', 'my-profile']);\r\n            }\r\n        }\r\n        else {\r\n            this.router.navigate(['/']);\r\n        }\r\n    }\r\n    goToDelenscioHome() {\r\n        window.open(environment.websiteDelenscioHome);\r\n    }\r\n    goToDelenscioCvLibrary() {\r\n        window.open(environment.websiteDelenscioCvLibrary);\r\n    }\r\n    goToDelenscioTesting() {\r\n        window.open(environment.websiteDelenscioTesting);\r\n    }\r\n    open(content) {\r\n        this.modalService.open(content, {\r\n            backdrop: 'static',\r\n            keyboard: false,\r\n            size: 'lg',\r\n            centered: true,\r\n        });\r\n    }\r\n    archiveCompany() {\r\n    }\r\n    setUser(setRoute = true) {\r\n        if (!this.isUser) {\r\n            this.menuType = this.accountTypeEnum.ME;\r\n            this.isChange = true;\r\n            sessionStorage.removeItem('actives-seo-for-company');\r\n            this.store.dispatch(new CompanyActions.setCurrentCompanyOfConnectedUser(null));\r\n            localStorage.removeItem('currentcompanyid');\r\n            if (setRoute) {\r\n                this.router.navigate(['/my-jobs/my-profile']);\r\n            }\r\n            this.isUser = true;\r\n            this.showAccountList = false;\r\n        }\r\n        console.log(this.isUser);\r\n    }\r\n    toogle() {\r\n        this.show = !this.show;\r\n    }\r\n    toogle1() {\r\n        this.show1 = !this.show1;\r\n    }\r\n    toogle2() {\r\n        this.show2 = !this.show2;\r\n    }\r\n    toogle3() {\r\n        this.show3 = !this.show3;\r\n    }\r\n    toogle4() {\r\n        this.show4 = !this.show4;\r\n    }\r\n    toogleMenu() {\r\n        this.showMenu = !this.showMenu;\r\n    }\r\n    toogleNotifs() {\r\n        if (!this.showNotifs) {\r\n            // this.loadMore(0, 10);\r\n        }\r\n        this.showNotifs = !this.showNotifs;\r\n    }\r\n    becomeEnterprise() {\r\n        this.show = false;\r\n        this.showAccountList = false;\r\n        this.companiesOfCurrentUser$.pipe(take(1), tap((value) => {\r\n            if (!value || (value && value.length < 5)) {\r\n                this.modalService.open(SharedBecomeEnterpriseComponent, {\r\n                    backdrop: 'static',\r\n                    keyboard: false,\r\n                    size: 'lg',\r\n                    centered: true,\r\n                });\r\n            }\r\n            else {\r\n                this.toastr.warning('nombre maximun de compte business atteint', 'vous ne pouvez avoir plus de 5 compte business');\r\n            }\r\n        })).toPromise().then();\r\n    }\r\n    onClick1(event) {\r\n        setTimeout(() => {\r\n            var _a;\r\n            if (!((_a = document.getElementById('account')) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {\r\n                // or some similar check\r\n                if (this.showAccountList === true) {\r\n                    this.showAccountList = !this.showAccountList;\r\n                }\r\n            }\r\n        });\r\n        setTimeout(() => {\r\n            var _a;\r\n            if (!((_a = document.getElementById('navigationMenu')) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {\r\n                // or some similar check\r\n                if (this.show === true) {\r\n                    this.show = !this.show;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    onToggleMenu() {\r\n        this.isMenuCollapsed = !this.isMenuCollapsed;\r\n    }\r\n    logout() {\r\n        this.router.navigate(['/logout']);\r\n    }\r\n    allNotifs(content) {\r\n        this.modalService.open(content, {\r\n            size: 'md',\r\n            centered: true,\r\n            scrollable: true,\r\n        });\r\n    }\r\n    createdHourAgo(createdAt) {\r\n        return moment().diff(createdAt, 'hours');\r\n    }\r\n    createdDayAgo(createdAt) {\r\n        return moment().diff(createdAt, 'days');\r\n    }\r\n    createdMinutesAgo(createdAt) {\r\n        return moment().diff(createdAt, 'minutes');\r\n    }\r\n    createdSecondesAgo(createdAt) {\r\n        return moment().diff(createdAt, 'seconds');\r\n    }\r\n    async closeNotification(notifications, notificationType) {\r\n    }\r\n    setNotification() {\r\n        this.numberOfDelenscioNotification = 0;\r\n    }\r\n    // E(ND LOAD MORE\r\n    ngOnDestroy() {\r\n        this.documentClickTargetSubscribe.unsubscribe();\r\n        this.subscription.unsubscribe();\r\n    }\r\n};\r\n__decorate([\r\n    HostListener('document:click', ['$event'])\r\n], SharedMenuHeaderComponent.prototype, \"onClick1\", null);\r\nSharedMenuHeaderComponent = __decorate([\r\n    Component({\r\n        // tslint:disable-next-line:component-selector\r\n        selector: 'job-shared-menu-header',\r\n        templateUrl: './shared-menu-header.component.html',\r\n        styleUrls: ['./shared-menu-header.component.scss'],\r\n        providers: [SharedMenuHeaderNotificationService]\r\n        // host: {'(window:click)': 'onClick($event)'},\r\n    })\r\n], SharedMenuHeaderComponent);\r\nexport { SharedMenuHeaderComponent };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}